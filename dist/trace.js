"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Trace {
  static frame() {
    const stack = new Error().stack;
    const frame = stack.split("at ")[2]; // /PrintVisitor.js:15:32
    // xyz (/PrintVisitor.js:17:32)
    // Object.<anonymous> (/PrintVisitor.js:21:30)

    let fname;
    let data;

    if (frame.indexOf("(") > -1) {
      fname = frame.substring(0, frame.indexOf("(")).trim();
      data = frame.substring(frame.indexOf("(") + 1, frame.indexOf(")")).split(":");
    } else {
      data = frame.split(":");
    }

    return {
      function: fname,
      filename: data[0],
      line: data[1].trim(),
      column: data[2].trim()
    };
  }

  static debug() {
    console.log('DEBUG', new Date().toUTCString(), Trace.frame());
  }

}

exports.default = Trace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFjZS50cyJdLCJuYW1lcyI6WyJUcmFjZSIsImZyYW1lIiwic3RhY2siLCJFcnJvciIsInNwbGl0IiwiZm5hbWUiLCJkYXRhIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsInRyaW0iLCJmdW5jdGlvbiIsImZpbGVuYW1lIiwibGluZSIsImNvbHVtbiIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsIkRhdGUiLCJ0b1VUQ1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9lLE1BQU1BLEtBQU4sQ0FBWTtBQUV2QixTQUFPQyxLQUFQLEdBQXlCO0FBQ3JCLFVBQU1DLEtBQUssR0FBSSxJQUFJQyxLQUFKLEdBQVlELEtBQTNCO0FBQ0EsVUFBTUQsS0FBSyxHQUFHQyxLQUFLLENBQUNFLEtBQU4sQ0FBWSxLQUFaLEVBQW1CLENBQW5CLENBQWQsQ0FGcUIsQ0FHckI7QUFDQTtBQUNBOztBQUNBLFFBQUlDLEtBQUo7QUFDQSxRQUFJQyxJQUFKOztBQUNBLFFBQUlMLEtBQUssQ0FBQ00sT0FBTixDQUFjLEdBQWQsSUFBb0IsQ0FBQyxDQUF6QixFQUE0QjtBQUN4QkYsTUFBQUEsS0FBSyxHQUFHSixLQUFLLENBQUNPLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJQLEtBQUssQ0FBQ00sT0FBTixDQUFjLEdBQWQsQ0FBbkIsRUFBdUNFLElBQXZDLEVBQVI7QUFDQUgsTUFBQUEsSUFBSSxHQUFHTCxLQUFLLENBQUNPLFNBQU4sQ0FBZ0JQLEtBQUssQ0FBQ00sT0FBTixDQUFjLEdBQWQsSUFBcUIsQ0FBckMsRUFBd0NOLEtBQUssQ0FBQ00sT0FBTixDQUFjLEdBQWQsQ0FBeEMsRUFBNERILEtBQTVELENBQWtFLEdBQWxFLENBQVA7QUFDSCxLQUhELE1BR087QUFDSEUsTUFBQUEsSUFBSSxHQUFHTCxLQUFLLENBQUNHLEtBQU4sQ0FBWSxHQUFaLENBQVA7QUFDSDs7QUFFRCxXQUFPO0FBQ0hNLE1BQUFBLFFBQVEsRUFBRUwsS0FEUDtBQUVITSxNQUFBQSxRQUFRLEVBQUVMLElBQUksQ0FBQyxDQUFELENBRlg7QUFHSE0sTUFBQUEsSUFBSSxFQUFFTixJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFHLElBQVIsRUFISDtBQUlISSxNQUFBQSxNQUFNLEVBQUVQLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUUcsSUFBUjtBQUpMLEtBQVA7QUFNSDs7QUFFRCxTQUFPSyxLQUFQLEdBQXFCO0FBQ2pCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCLElBQUlDLElBQUosR0FBV0MsV0FBWCxFQUFyQixFQUErQ2xCLEtBQUssQ0FBQ0MsS0FBTixFQUEvQztBQUNIOztBQTNCc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIENhbGxTaXRlIHtcbiAgICBmdW5jdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGZpbGVuYW1lOiBzdHJpbmcsXG4gICAgbGluZTogc3RyaW5nLFxuICAgIGNvbHVtbjogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNlIHtcblxuICAgIHN0YXRpYyBmcmFtZSgpOiBDYWxsU2l0ZSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgY29uc3QgZnJhbWUgPSBzdGFjay5zcGxpdChcImF0IFwiKVsyXTtcbiAgICAgICAgLy8gL1ByaW50VmlzaXRvci5qczoxNTozMlxuICAgICAgICAvLyB4eXogKC9QcmludFZpc2l0b3IuanM6MTc6MzIpXG4gICAgICAgIC8vIE9iamVjdC48YW5vbnltb3VzPiAoL1ByaW50VmlzaXRvci5qczoyMTozMClcbiAgICAgICAgbGV0IGZuYW1lO1xuICAgICAgICBsZXQgZGF0YTtcbiAgICAgICAgaWYgKGZyYW1lLmluZGV4T2YoXCIoXCIpID4tMSkge1xuICAgICAgICAgICAgZm5hbWUgPSBmcmFtZS5zdWJzdHJpbmcoMCwgZnJhbWUuaW5kZXhPZihcIihcIikpLnRyaW0oKTtcbiAgICAgICAgICAgIGRhdGEgPSBmcmFtZS5zdWJzdHJpbmcoZnJhbWUuaW5kZXhPZihcIihcIikgKyAxLCBmcmFtZS5pbmRleE9mKFwiKVwiKSkuc3BsaXQoXCI6XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IGZyYW1lLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmdW5jdGlvbjogZm5hbWUsXG4gICAgICAgICAgICBmaWxlbmFtZTogZGF0YVswXSxcbiAgICAgICAgICAgIGxpbmU6IGRhdGFbMV0udHJpbSgpLFxuICAgICAgICAgICAgY29sdW1uOiBkYXRhWzJdLnRyaW0oKSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkZWJ1ZygpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RFQlVHJywgbmV3IERhdGUoKS50b1VUQ1N0cmluZygpLCBUcmFjZS5mcmFtZSgpKTtcbiAgICB9XG59Il19